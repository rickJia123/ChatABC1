plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'privacy-sentry-plugin'
    id 'com.google.devtools.ksp'
}
apply plugin: 'privacy-sentry-plugin'
Properties mProperties = gradle.ext.mProperties

android {
    namespace 'river.chat.chatevery'
    compileSdk 33

    defaultConfig {
        applicationId build_versions.appid
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode build_versions.version_code
        versionName build_versions.version_name
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        flavorDimensions "versionCode"

        renderscriptTargetApi build_versions.min_sdk
        renderscriptSupportModeEnabled true
        multiDexEnabled true
        //支持Java8
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
        kotlinOptions {
            jvmTarget = '1.8'
        }
        dexOptions {
            incremental true//打开dex增量编译  这还是一个实验性的功能，但是还是推荐打开试试
            javaMaxHeapSize "4G"//设置允许分配的的最大堆内存
        }
        manifestPlaceholders = [qqappid: "11111111111111111111"]
        if (isRelease()) {
            ////64位包

            ndk {
                abiFilters 'arm64-v8a'
            }
            packagingOptions {
                doNotStrip "*/arm64-v8a/*.so"
                exclude 'META-INF/io.netty.versions.properties'
                exclude 'META-INF/INDEX.LIST'
            }
        }

    }


    signingConfigs {
        release {
            storeFile file('/Users/rick/Desktop/rick/personal/program/chatEvery/chatEveryKey.jks')
            storePassword mProperties.getProperty("storePassword")
            keyAlias mProperties.getProperty("keyAlias")
            keyPassword mProperties.getProperty("keyPassword")
        }
        debug {
            storeFile file('/Users/rick/Desktop/rick/personal/program/chatEvery/chatEveryKey.jks')
            storePassword mProperties.getProperty("storePassword")
            keyAlias mProperties.getProperty("keyAlias")
            keyPassword mProperties.getProperty("keyPassword")
        }
    }
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            if (variant.buildType.name == 'release') {
                outputFileName = "GPTEvery-${versionName}-${new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("GMT+8"))}-release.apk"
            } else {
                outputFileName = "GPTEvery-${versionName}-${new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("GMT+8"))}-debug.apk"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        dataBinding true
    }
}

boolean isRelease() {
    if (gradle.startParameter.taskNames != null) {
        for (String s : gradle.startParameter.taskNames) {
            if (s.contains("Release") | s.contains("release")) {
                return true
            }
        }
    }
    return false
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    for (module in appModules) {
        implementation project(":$module")
    }
}
/**
 * 合规 begin
 */
privacy {
    // 设置免hook的名单
    blackList = []
    // 开关PrivacySentry插件功能
    enablePrivacy = false
    // 开启hook反射的方法
    hookReflex = false
    // 开启hook 替换类，目前支持file
    hookConstructor = false
    // 是否开启hook变量，默认为false，建议弃用
    hookField = false



//     以下是为了解决小米照明弹自启动问题的尝试, 如果没有自启动的需求，这里关闭即可
//     hook Service的部分代码，修复在MIUI上的自启动问题
//     部分Service把自己的Priority设置为1000，这里开启代理功能，可以代理成0
    enableReplacePriority = true
    replacePriority = 1

    // 支持关闭Service的Export功能，默认为false，注意部分厂商通道之类的push(xiaomi、vivo、huawei等厂商的pushService)，不能关闭
    enableCloseServiceExport = true
    // Export白名单Service, 这里根据厂商的名称设置了白名单
    serviceExportPkgWhiteList = ["xiaomi","vivo","honor","meizu","oppo","Oppo","Hms","huawei","stp","Honor"]
    // 修改Service的onStartCommand 返回值修改为START_NOT_STICKY
    enableHookServiceStartCommand = true
}
/**
 * 合规 end
 */

